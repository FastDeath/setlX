program main;
    fromWithoutSideEffect();
    fromListWithoutSideEffect();
    fromVariable();
    listIndex();
    collectionsWithOm();
    listAssignments();
    innerListAssignments();
    firstClassFunctions();
    nestedFunctions();
    iterator();
    scopeTests();
    forallTests();
    existsTests();

    procedure fromWithoutSideEffect();
        a := {{1},{2}};
        b := {{3},{4}};
        c := a + b;
        d := from c;

        if a = {{1},{2}} and b = {{3},{4}} and #c = 3 then
            print("test 01 successful (side-effects in from)");
        else
            print("test 01 failed (side-effects in from)");
        end if;
    end fromWithoutSideEffect;

    procedure fromListWithoutSideEffect();
        a := [{1},{2}];
        b := [{3},{4}];
        c := a + b;
        d := from c;

        if a = [{1},{2}] and b = [{3},{4}] and #c = 3 then
            print("test 02 successful (side-effects in from lists)");
        else
            print("test 02 failed (side-effects in from lists)");
        end if;
    end fromListWithoutSideEffect;

    procedure fromVariable();
        a := {{1},{2}};
        b := a;
        d := from a;

        if #a = 1 and b = {{1},{2}} then
            print("test 03 successful (from variable)");
        else
            print("test 03 failed (from variable)");
        end if;
    end fromVariable;

    procedure listIndex();
        a := [1];
        b := a(2..);
        c := [1,2,4];
        d := c(10);
        e := c(2..3)(1);

        if b = [] and d = om and e = 2 then
            print("test 04 successful (list index)");
        else
            print("test 04 failed (list index)");
        end if;
    end listIndex;

    procedure collectionsWithOm();
        a := [1,om];
        b := {1,om};
        c := [1,om,3];
        d := {1,om,3};

        if a = [1] and b = {1} and c = [1,om,3] and d = {1,3} then
            print("test 05 successful (collections with om)");
        else
            print("test 05 failed (collections with om)");
        end if;
    end collectionsWithOm;

    procedure listAssignments();
        [a,b,c]   := [1,2,3];
        [[d,e],f] := [[4,5],6];

        if a = 1 and b = 2 and c = 3 and d = 4 and e = 5 and f = 6 then
            print("testÂ 06 successful (list assignments)");
        else
            print("test 06 failed (list assignments)");
        end if;
    end listAssignments;

    procedure innerListAssignments();
        a := [1,2,3];
        a(2):= 6;
        b := [[[1,2,3]],[[4,5,6]],[[7,8,9]]];
        b(3)(1)(2):= "t";
        c := [1,2,3];
        c(6):= 10;
        d := c;
        d(6):= om;

        if a = [1,6,3] and b = [[[1, 2, 3]], [[4, 5, 6]], [[7, "t", 9]]] and c = [1, 2, 3, om, om, 10] and d = [1, 2, 3] then
            print("test 07 successful (assignments to list content)");
        else
            print("test 07 failed (assignments to list content)");
        end if;
    end innerListAssignments;

    procedure firstClassFunctions();
        boxOfMystery   := {cos, sin};
        mystery        := arb boxOfMystery;
        anotherMystery := +/ (boxOfMystery - {mystery});

        if test(mystery, anotherMystery) then
            print("test 08 successful (first class functions)");
        else
            print("test 08 failed (first class functions)");
        end if;

        procedure test(m, am);
            return 1 - m(0) = am(0);
        end test;
    end firstClassFunctions;

    procedure nestedFunctions();
        y := screwedSin(1);
        z := callCopysOnlyFunctions();

        if y > 0.8414 + 1 and y < 0.8415 + 1 and z = 42 then
            print("test 09 successful (nested functions)");
        else
            print("test 09 failed (nested functions)");
        end if;

        procedure callCopysOnlyFunctions();
            return omTo42(y);
        end callCopysOnlyFunctions;

        procedure screwedSin(x);
            return sin(x) + x;
        end screwedSin;

        procedure omTo42(x);
            if x = om then
                return 42;
            else
                return false;
            end if;
        end omTo42;
    end nestedFunctions;

    procedure iterator();
        u := [[x,y,z,w]: x in {1,2}, y in {1,2}, [z,w] in [[x,y]]];

        if u = [[1, 1, 1, 1], [1, 2, 1, 2], [2, 1, 2, 1], [2, 2, 2, 2]] then
            print("test 10 successful (iterators)");
        else
            print("test 10 failed (iterators)");
        end if;
    end iterator;

    procedure scopeTests();
        result := "";
        q := [[[1,2,3],[4,5,6]]];
        for q in q, q in q, q in q loop
            result +:= " " + q;
            q := "foo";
            p := "test";
        end loop;
        while p = "test" loop
            p := p(2..);
        end loop;
        v := "test";
        w := {v: w in q, v in w};
        if result = " 1 2 3 4 5 6" and q = [[[1,2,3],[4,5,6]]] and p = "est" and v = "test" then
            print("test 11 successful (scope)");
        else
            print("test 11 failed (scope)");
        end if;
    end scopeTests;

    procedure forallTests();
        a := b := c := d := "test";
        e := forall a in [1..5], b in [1..5] | (a * b) < 16; -- first fail: a=4,b=4
        f := forall c in [1..5], d in [1..5] | c * d <= 25;-- none fails
        if a = "test" and b = "test" and c = "test" and d = "test" and e = false and f = true then
            print("test 12 successful (forall)");
        else
            print("test 12 failed (forall)");
        end if;
    end forallTests;

    procedure existsTests();
        a := b := c := d := "test";
        e := exists a in [1..5], b in [1..5] | a * b >= 16;-- first exists: a=5,b=5
        f := exists c in [1..5], d in [1..5] | c * d > 25; -- nothing exists
        if a = 4 and b = 4 and c = 5 and d = 5 and e = true and f = false then
            print("test 13 successful (exists)");
        else
            print("test 13 failed (exists)");
        end if;
    end existsTests;

end main;
