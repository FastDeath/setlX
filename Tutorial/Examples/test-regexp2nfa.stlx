load("regexp-2-nfa.stlx");

nfa2String := procedure(nfa, sigma) {
    [states, delta, q0, qf] := nfa;
    result := "";
    n := 0;
    result += "states: $states$\n\n";   
    result += "start state: $q0$\n\n";
    result += "transitions:\n";
    for (q in states) {
        for (c in sigma, p in delta(q, c)) {
            result += "[$q$, $c$] |-> $p$\n";
        }
        for (p in delta(q, "")) {
            result += "[$q$, \"\"] |-> $p$\n";
        }
    }
    result += "\naccepting state: $qf$\n";
    return result;
};

testRegexp2NFA := procedure(r, sigma) {
    f := regexp2NFA(r);
    print("-" * 80);
    print("regular expression: $r$");
    print(nfa2String(f, sigma));
    print("-" * 80);
};

sigma := { "a", "b" };

r0 := "a";
testRegexp2NFA(r0, sigma);

r1 := Cat(Cat(Or("a", "b"), Star("a")), "b");
testRegexp2NFA(r1, sigma);

r2 := Cat(Star("a"), Star("b"));
testRegexp2NFA(r2, sigma);
