#!/bin/bash

tmpFile=$(mktemp -t setlx-XXXXXXXXXX)

manualTestFiles=""
skippedTestFiles=""
nSkipped=0

# set overrides for setlX launcher script
export OVERRIDE_setlXJarLocation="$PWD/src/setlX.jar"
export OVERRIDE_setlXjavaParameters="-d64 -Xmx6144m"

# other locations for tests
setlXlaunchScript="$PWD/src/setlX"
diffDir="$PWD"

# be nice to the rest of the system
renice -n 10 $$

# prepare the interpreter
simpleTest=simpleTest/test.stlx
cd src; make test >/dev/null 2>"$tmpFile"; cd ..

# check for failed tests
failedCount=$(grep -c "failed" "$tmpFile")
everythingOkCount=$(grep -c "Everything is fine. Move along sir!" "$tmpFile")

# alert the user and stop
if [ $failedCount -gt 0 -o $everythingOkCount -ne 1 ]
  then
    echo "the initial testfile '$simpleTest' failed!"
    rm -f "$tmpFile"
    exit 1
else
    echo -e "executing file '$simpleTest' successful!\n"
fi

# number of concurrent processes to start
numberOfThreads=$("$setlXlaunchScript" --ev "nCPUs() \ 2")
if [ ! -z "$1" ]
  then
    if [[ "$1" =~ ^[1-9][0-9]*$ ]]
      then
        numberOfThreads="$1"
    else
        echo "First argument (number of threads) must be a number!"
        exit 1
    fi
fi

if [ "$numberOfThreads" -lt 1 ]
  then
    numberOfThreads="1"
fi

rm -f diff.*.result

# count number of files
count=0
while read -r -d $'\0' path
  do
    directoryname="$(dirname $path)"

    if [ "$setlX_block_performance" == "1" -a "$directoryname" == "example_SetlX_code/performance_test_code" ]
      then
        continue
    fi

    if [ ! -e "$path.reference" ]
      then
        continue
    fi

    count=$(bc <<< "$count + 1")

done < <( find -L example_SetlX_code -name "*.stlx" -print0 )

started=0
threadID=0
pids=( )
references=( )
outputFiles=( )
filenames=( )
shotnames=( )
messages=( )
# loop through all SetlX files, execute them and compare to reference result
while read -r -d $'\0' path
  do
    shortname="${path#example_SetlX_code/}"
    directoryname="$(dirname $path)"
    filename="$(basename $path)"
    outputFile=$(mktemp -t setlx-XXXXXXXXXX)

    if [ "$setlX_block_performance" == "1" -a "$directoryname" == "example_SetlX_code/performance_test_code" ]
      then
        continue
    fi

    if [ ! -e "$path.reference" ]
      then
        manualTestFiles="$manualTestFiles$filename, "
        continue
    fi

    started=$(bc <<< "$started + 1")
    echo -e "Starting test $started/$count.\n"
    message="Test of file '$shortname' ($started/$count) "

    (
        # execute with setlX
        if [ -e "$path.input" ]
          then
            cd "$directoryname"; cat "$filename.input" | "$setlXlaunchScript" --predictableRandom --runtimeDebugging "$filename" > "$outputFile" 2>&1; cd - >/dev/null
        else
            cd "$directoryname"; "$setlXlaunchScript" --predictableRandom --runtimeDebugging "$filename" > "$outputFile" 2>&1; cd - >/dev/null
        fi
    )&
    pids[$threadID]=$!
    references[$threadID]="$path.reference"
    outputFiles[$threadID]="$outputFile"
    filenames[$threadID]="$filename"
    shotnames[$threadID]="$shortname"
    messages[$threadID]="$message"

    # get next free ID in array, which is smaller as $numberOfThreads
    threadID=-1
    while [ $threadID -lt 0 ]
      do
        if [ $started -ge $count ]
          then
            wait
        fi
        for (( i = 0; i < $numberOfThreads; i++))
          do
            if [ $(kill -0 "${pids[$i]}" > /dev/null 2>&1; echo $?) -ne 0 ]
              then
                threadID=$i

                # diff result of finished thread
                if [ -f "${outputFiles[$i]}" ]
                  then
                    message=""

                    diff "${references[$i]}" "${outputFiles[$i]}" > "$tmpFile"
                    if [ $? -eq 1 ]
                      then

                        skippedTestFiles="$skippedTestFiles${shotnames[$i]}, "
                        nSkipped=$(bc <<< "$nSkipped + 1")

                        mv "$tmpFile" "$diffDir/diff.${filenames[$i]}.result"
                        message="${messages[$i]} failed ... (see diff.${filenames[$i]}.result)\n"

                    else
                        message="${messages[$i]} successful!\n"
                    fi
                    echo -e "$message"

                    rm -f "${outputFiles[$i]}"
                fi
            fi
        done
        if [ $threadID -lt 0 ]
          then
            if [ $(which usleep > /dev/null 2>&1; echo $?) -eq 0 ]
              then
                usleep 100000
            else
                sleep 1
            fi
        fi
    done

done < <( find -L example_SetlX_code -name "*.stlx" -print0 )

rm -f "$tmpFile"

manualTestFiles="${manualTestFiles%, }"
echo "The following examples need to be tested manually: $manualTestFiles"

if [ $nSkipped -gt 0 ]
  then
    skippedTestFiles="${skippedTestFiles%, }"
    echo
    echo "The following examples failed: $skippedTestFiles"
    echo
    echo "!! $nSkipped examples did fail this test !!"
else
    echo
    echo "Everything is fabulous. Well done sir!"
fi

exit 0

