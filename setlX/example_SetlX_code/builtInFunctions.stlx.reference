The circumference of a circle with radius 10 is: 62.83185307179586.
100 is approximately 99.99999999999999.

variables in outer scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["params", []], ["print", ^preDefinedProcedure("print")]})
variables in outer scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["params", []], ["print", ^preDefinedProcedure("print")], ["printInnerScope", procedure () { secretVariable := 42; print("variables in inner scope: ", getScope()); }]})
variables in inner scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["print", ^preDefinedProcedure("print")], ["printInnerScope", procedure () { secretVariable := 42; print("variables in inner scope: ", getScope()); }], ["secretVariable", 42]})
variables in outer scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["params", []], ["print", ^preDefinedProcedure("print")], ["printInnerScope", procedure () { secretVariable := 42; print("variables in inner scope: ", getScope()); }]})

Arrr("said", "the", "pirate")
Arrr("said", "the", "pirate")

46656 == 46656

maximum A (for N = 5,      P <= 5%) is 2.2184.
minimum N (for A = 1.75,   P <= 7%) is 5.
Erlang B  (for A = 0.2*48, N = 20 ) is 0.001231677816976427.
Erlang C  (for A = 0.2*48, N = 20 ) is 0.002365921291627030.

direct:    string   : "99"
converted: int      : 99
direct:    string   : "text"
converted: string   : "text"
direct:    string   : "text with number 5"
converted: string   : "text with number 5"
direct:    string   : "5.99"
converted: real     : 5.99
direct:    int      : 6
converted: int      : 6
direct:    real     : 99.999
converted: int      : 99
direct:    ??       : 'om'
converted: string   : "om"
direct:    ??       : 'procedure (value) { /* predefined procedure `abs' */ }'
converted: string   : "procedure (value) { /* predefined procedure `abs' */ }"
direct:    rational : 1/3
converted: int      : 0
direct:    string   : "99/100"
converted: rational : 99/100

["tails", "tails", "heads", "tails", "tails", "heads", "tails", "heads", "tails", "tails", "heads", "heads", "heads", "tails", "tails", "tails", "tails", "heads", "tails", "heads", "heads", "heads", "heads", "heads", "heads", "tails", "heads", "heads", "tails", "heads", "tails", "tails", "heads", "heads", "tails", "heads", "heads", "heads", "tails", "tails", "tails", "tails", "heads", "tails", "tails", "tails", "tails", "tails", "tails", "heads", "tails", "heads", "tails", "tails", "tails", "tails", "heads", "tails", "heads", "heads", "tails", "heads", "tails", "tails", "tails", "heads", "heads", "heads", "heads", "heads", "heads", "tails", "heads", "tails", "heads", "tails", "heads", "tails", "tails", "tails", "tails", "tails", "tails", "tails", "tails", "heads", "heads", "heads", "heads", "heads", "tails", "heads", "heads", "heads", "tails", "heads", "tails", "tails", "tails", "tails"]
Chance of SetlX being executed in space: 0.2112353749298962

When this was written, 15432 days had gone by since 1970-01-01.
Lets wait 500ms to commemorate this occasion.
OK, that's enough.

This is a 21_test_12
This is a $test$
This is a 21_test_12
This is a $test$
This is a 21_test_12This is a 21_test_12

{throwACoin, print} = {^lambdaProcedure([], ^call("rnd", [{"heads", "tails"}])), ^preDefinedProcedure("print")}
a + 10 * b % 4 = ^sum(^variable("a"), ^modulo(^multiply(10, ^variable("b")), 4))
"print(parseStatements(\"print(\\"that is crazy!\\");\"));" = ^block([^call("print", [^call("parseStatements", ["print(\"that is crazy!\");"])])])

6
foo
198
0.8414709848078965

Is 10123124191203 prime? false.
Could 10123124191203 be prime? false.
What is next prime after 10123124191203? 10123124191211.

All permutations of [1, 2, 2, 3] are {[1, 2, 2, 3], [1, 2, 3, 2], [1, 3, 2, 2], [2, 1, 2, 3], [2, 1, 3, 2], [2, 2, 1, 3], [2, 2, 3, 1], [2, 3, 1, 2], [2, 3, 2, 1], [3, 1, 2, 2], [3, 2, 1, 2], [3, 2, 2, 1]}.
Next permutation after [3, 1, 2, 2] is [3, 2, 1, 2].
sorted [31, 1, 2, 7, 99] is [1, 2, 7, 31, 99].
sorted `asdaf22341ad1' is `112234aaaddfs'.
shuffled [1 .. 5] is [3, 4, 1, 2, 5].
shuffled `this is a test' is `itsa hse  stti'.

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] <-> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
[[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4]] <-> [[3, 4], [3, 3], [3, 2], [2, 4], [2, 3], [2, 2], [1, 4], [1, 3], [1, 2]]
SetlX <-> XlteS

["from", "hell", "", "I", "come"]
from;hell;;I;come
[["foo", "bar"], ["ding", "dong"]]
from hell i come
FROM HELL I COME
false
true
this is a test

[["setlX", "setlX.cmd", "setlX.jar", "setlXprof", "simpleTest"], []]

Assertion failed: "assert function works"
