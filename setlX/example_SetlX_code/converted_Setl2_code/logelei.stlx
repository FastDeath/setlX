
createBelegung := procedure(m, a) {
	return {[x, x in m]: x in a};
};

evalSet := procedure(fS, i) {
	return {evalEquation(f, i): f in fS} == {true};
};

evalEquation := procedure(f, i) {
	switch {
		case f == 1 :
			return true;
		case f == 0 :
			return false;
		case isString((f)) :
			return i[f];
		case f[1] == "-" :
			return ( ! (evalEquation(f[2], i)) );
		case f[2] == "*" :
			return evalEquation(f[1], i) && evalEquation(f[3], i);
		case f[2] == "+" :
			return evalEquation(f[1], i) || evalEquation(f[3], i);
		case f[2] == "->" :
			return ( ! (evalEquation(f[1], i)) ) || evalEquation(f[3], i);
		case f[2] == "<->" :
			return evalEquation(f[1], i) == evalEquation(f[3], i);
		default :
			print("evalEquation: Syntax-Fehler: ", f);
	}
};

f1 := ["hM", "->", "fM"];
f2 := ["W", "+", "K"];
f3 := [["fM", "+", "F"], "*", ["-", ["fM", "*", "F"]]];
f4 := ["F", "<->", "K"];
f5 := ["W", "->", ["K", "*", "hM"]];
fS := {f1, f2, f3, f4, f5};
a := {"hM", "fM", "W", "K", "F"};
p := pow(a);
b := {createBelegung(m, a): m in p};
s := {i in b | (evalSet(fS, i) <==> true)};
print("\nMenge der Belegungen, die FS erfuellen:");
if (#s == 1) {
	i := arb(s);
	besucher := {x in a | i[x]};
	print("\nFolgende Personen kommen: ", besucher);
}

