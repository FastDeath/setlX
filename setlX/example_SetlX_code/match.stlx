// this program demonstrates the match statement

exprString := "55 * 99 - 123 ** (14 - 2)";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case a - b ** (c) :
        print("match: a = $a$, b = $b$, c = $c$");
    default :
        print("failed to match");
}

print();

exprString := "[1, 99, 7]";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case [a, b, c] :
        print("match: a = $a$, b = $b$, c = $c$");
    default :
        print("failed to match");
}

print();

list    := [1, "foo", 7];

print(canonical(list));

match (list) {
    case [a, "foo", b] :
        print("match: a = $a$, b = $b$");
    default :
        print("failed to match");
}

print();

list    := [1, "foo", 7];

print(canonical(list));

match (list) {
    case [a, "bar", b] : // MUST NOT match
        print("match: a = $a$, b = $b$");
    default :
        print("failed to match");
}

print();

exprString := "sqrt(a**2 + b**2) == c";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case sqrt(x + _ ** y) == _ :  // match the function call only if it is exactly sqrt
        print("match: sqrt: x = $x$, y = $y$");
    default :
        print("failed to match");
}

print();

exprString := "sqrt(a**2 + b**2)";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case fnc(x + _ ** y): // MUST NOT match, because it matches only a call to `fnc'
        print("match: fnc: x = $x$, y = $y$");
    case ^call(fnc, [x + _ ** y]): // matches all function calls with matching arguments
        print("match: fnc = $fnc$, x = $x$, y = $y$");
    default :
        print("failed to match");
}

print();

exprString := "u";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case ^variable(x) :
        print("match: x = $x$");
    default :
        print("failed to match");
}

print();

