
fromWithoutSideEffect := procedure() {
    a := {{1}, {2}};
    b := {{3}, {4}};
    c := a + b;
    d := from(c);
    if (a == {{1}, {2}} && b == {{3}, {4}} && #c == 3) {
        print("test 01 successful (side-effects in from)");
    } else {
        print("test 01 failed (side-effects in from)");
    }
};
fromWithoutSideEffect();

fromListWithoutSideEffect := procedure() {
    a := [{1}, {2}];
    b := [{3}, {4}];
    c := a + b;
    d := from(c);
    if (a == [{1}, {2}] && b == [{3}, {4}] && #c == 3) {
        print("test 02 successful (side-effects in from lists)");
    } else {
        print("test 02 failed (side-effects in from lists)");
    }
};
fromListWithoutSideEffect();

fromVariable := procedure() {
    a := {{1}, {2}};
    b := a;
    d := from(a);
    if (#a == 1 && b == {{1}, {2}}) {
        print("test 03 successful (from variable)");
    } else {
        print("test 03 failed (from variable)");
    }
};
fromVariable();

listIndex := procedure() {
    a := [1];
    b := a(2..);
    c := [1, 2, 4];
    d := c(10);
    e := c(2..3)(1);
    if (b == [] && d == om && e == 2) {
        print("test 04 successful (list index)");
    } else {
        print("test 04 failed (list index)");
    }
};
listIndex();

collectionsWithOm := procedure() {
    a := [1, om];
    b := {1, om};
    c := [1, om, 3];
    d := {1, om, 3};
    if (a == [1] && b == {1} && c == [1, om, 3] && d == {1, 3}) {
        print("test 05 successful (collections with om)");
    } else {
        print("test 05 failed (collections with om)");
    }
};
collectionsWithOm();

listAssignments := procedure() {
    [a, b, c] := [1, 2, 3];
    [[d, e], f] := [[4, 5], 6];
    if (a == 1 && b == 2 && c == 3 && d == 4 && e == 5 && f == 6) {
        print("testÂ 06 successful (list assignments)");
    } else {
        print("test 06 failed (list assignments)");
    }
};
listAssignments();

innerListAssignments := procedure() {
    a := [1, 2, 3];
    a(2) := 6;
    b := [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]];
    b(3)(1)(2) := "t";
    c := [1, 2, 3];
    c(6) := 10;
    d := c;
    d(6) := om;
    if (a == [1, 6, 3] && b == [[[1, 2, 3]], [[4, 5, 6]], [[7, "t", 9]]] && c == [1, 2, 3, om, om, 10] && d == [1, 2, 3]) {
        print("test 07 successful (assignments to list content)");
    } else {
        print("test 07 failed (assignments to list content)");
    }
};
innerListAssignments();

firstClassFunctions := procedure() {

    test := procedure(m, am) {
        return 1 - m(0) == am(0);
    };

    boxOfMystery := {cos, sin};
    mystery := arb(boxOfMystery);
    anotherMystery := +/ (boxOfMystery - {mystery});
    if (test(mystery, anotherMystery)) {
        print("test 08 successful (first class functions)");
    } else {
        print("test 08 failed (first class functions)");
    }
};
firstClassFunctions();

nestedFunctions := procedure() {

    callCopysOnlyFunctions := procedure() {
        return omTo42(y);
    };

    screwedSin := procedure(x) {
        return sin(x) + x;
    };

    omTo42 := procedure(x) {
        if (x == om) {
            return 42;
        } else {
            return false;
        }
    };

    y := screwedSin(1);
    z := callCopysOnlyFunctions();
    if (y > 0.8414 + 1 && y < 0.8415 + 1 && z == 42) {
        print("test 09 successful (nested functions)");
    } else {
        print("test 09 failed (nested functions)");
    }
};
nestedFunctions();

iterator := procedure() {
    u := [[x, y, z, w]: x in {1, 2}, y in {1, 2}, [z, w] in [[x, y]]];
    if (u == [[1, 1, 1, 1], [1, 2, 1, 2], [2, 1, 2, 1], [2, 2, 2, 2]]) {
        print("test 10 successful (iterators)");
    } else {
        print("test 10 failed (iterators)");
    }
};
iterator();

scopeTests := procedure() {
    result := "";
    q := [[[1, 2, 3], [4, 5, 6]]];
    for (q in q, q in q, q in q) {
        result := result + " " + q;
        q := "foo";
        p := "test";
    }
    while (p == "test") {
        p := p(2..);
    }
    v := "test";
    w := {v: w in q, v in w};
    if (result == " 1 2 3 4 5 6" && q == [[[1, 2, 3], [4, 5, 6]]] && p == "est" && v == "test") {
        print("test 11 successful (scope)");
    } else {
        print("test 11 failed (scope)");
    }
};
scopeTests();

forallTests := procedure() {
    a := b := c := d := "test";
    // none fails
    e := forall(a in [1 .. 5], b in [1 .. 5] | a * b <= 25);
    // first fail: c == 4, d == 4
    f := forall(c in [1 .. 5], d in [1 .. 5] | (c * d) < 16);
    if (a == "test" && b == "test" && e == true && c == 4 && d == 4 && f == false) {
        print("test 12 successful (forall)");
    } else {
        print("test 12 failed (forall)");
    }
};
forallTests();

existsTests := procedure() {
    a := b := c := d := "test";
    // first exists: a == 4, b == 4
    e := exists(a in [1 .. 5], b in [1 .. 5] | a * b >= 16);
    // nothing exists
    f := exists(c in [1 .. 5], d in [1 .. 5] | c * d > 25);
    if (a == 4 && b == 4 && e == true && c == "test" && d == "test" && f == false) {
        print("test 13 successful (exists)");
    } else {
        print("test 13 failed (exists)");
    }
};
existsTests();

lazyChecking := procedure() {
    correct := false;
    a := b := 1;
    increaseTrue := procedure (rw x) {
        x += 1;
        return true;
    };
    increaseFalse := procedure (rw x) {
        x += 1;
        return false;
    };

    // true and true (not lazy-checkable)
    c := increaseTrue(a) && increaseTrue(b);
    // now a and b should be 2, c should be true
    correct := a == 2 && b == 2 && c == true;

    // false and true (lazy-checkable)
    c := increaseFalse(a) && increaseTrue(b);
    // now a should be 3, but b still 2, c should be false
    correct := correct && a == 3 && b == 2 && c == false;

    if (correct) {
        print("test 14 successful (lazyChecking)");
    } else {
        print("test 14 failed (lazyChecking)");
    }
};
lazyChecking();

