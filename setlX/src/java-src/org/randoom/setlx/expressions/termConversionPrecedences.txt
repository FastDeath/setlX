When converting a term into an expression the term might represent an syntax-tree
which is not "naturally" formed, i.e. contains brackets when an inner expression has
lower precedence then its parent.
Therefore during conversion the missing brackets are automatically created using the
precedences and associativity rules listed here:

Precedence, Associativity, Operator(s)
0000,       -,             reserved (explicit "do never bracket inner expression!")
1000,       right,         :=, +=, -=, *=, /=, %=
1100,       left,          <==>, <!=>
1200,       left,          =>
1300,       left,          ||
1400,       left,          &&
1500,       left,          ==, !=, <, <=, >, >=, in, notin
1600,       left,          +, -
1700,       left,          *, /, %
1800,       right,         **
1900,       right,         - i.e. unary minus
1900,       left,          ! i.e. factorial
1900,       -,             (), other unary operators and expressions e.g. call etc
2000,       right,         ! i.e. not
9999,       -,             reserved (expressions with this precedence will never be bracketed.
                           This includes atoms like Values, Set-Constructors, String-Constructors, etc)

