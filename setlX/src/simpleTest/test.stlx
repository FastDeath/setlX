var testNumber;

testNumber := 0;

fromWithoutSideEffect := procedure() {
    testNumber += 1;

    a := {{1}, {2}};
    b := {{3}, {4}};
    c := a + b;
    d := from(c);
    if (a == {{1}, {2}} && b == {{3}, {4}} && #c == 3) {
        printErr("test $testNumber$ successful (side-effects in from)");
    } else {
        printErr("test $testNumber$ failed (side-effects in from)");
    }
};
fromWithoutSideEffect();

fromListWithoutSideEffect := procedure() {
    testNumber += 1;

    a := [{1}, {2}];
    b := [{3}, {4}];
    c := a + b;
    d := from(c);
    if (a == [{1}, {2}] && b == [{3}, {4}] && #c == 3) {
        printErr("test $testNumber$ successful (side-effects in from lists)");
    } else {
        printErr("test $testNumber$ failed (side-effects in from lists)");
    }
};
fromListWithoutSideEffect();

fromVariable := procedure() {
    testNumber += 1;

    a := {{1}, {2}};
    b := a;
    d := from(a);
    if (#a == 1 && b == {{1}, {2}}) {
        printErr("test $testNumber$ successful (from variable)");
    } else {
        printErr("test $testNumber$ failed (from variable)");
    }
};
fromVariable();

listIndex := procedure() {
    testNumber += 1;

    a := [1];
    b := a[2..];
    c := [1, 2, 4];
    d := c[10];
    e := c[2..3][1];
    if (b == [] && d == om && e == 2) {
        printErr("test $testNumber$ successful (list index)");
    } else {
        printErr("test $testNumber$ failed (list index)");
    }
};
listIndex();

collectionsWithOm := procedure() {
    testNumber += 1;

    a := [1, om];
    b := {1, om};
    c := [1, om, 3];
    d := {1, om, 3};
    if (a == [1] && b == {1} && c == [1, om, 3] && d == {1, 3}) {
        printErr("test $testNumber$ successful (collections with om)");
    } else {
        printErr("test $testNumber$ failed (collections with om)");
    }
};
collectionsWithOm();

listAssignments := procedure() {
    testNumber += 1;

    [a, b, c] := [1, 2, 3];
    [[d, e], f] := [[4, 5], 6];
    if (a == 1 && b == 2 && c == 3 && d == 4 && e == 5 && f == 6) {
        printErr("testÂ $testNumber$ successful (list assignments)");
    } else {
        printErr("test $testNumber$ failed (list assignments)");
    }
};
listAssignments();

innerListAssignments := procedure() {
    testNumber += 1;

    a := [1, 2, 3];
    a[2] := 6;
    b := [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]];
    b[3][1][2] := "t";
    c := [1, 2, 3];
    c[6] := 10;
    d := c;
    d[6] := om;
    if (a == [1, 6, 3] && b == [[[1, 2, 3]], [[4, 5, 6]], [[7, "t", 9]]] && c == [1, 2, 3, om, om, 10] && d == [1, 2, 3]) {
        printErr("test $testNumber$ successful (assignments to list content)");
    } else {
        printErr("test $testNumber$ failed (assignments to list content)");
    }
};
innerListAssignments();

firstClassFunctions := procedure() {
    testNumber += 1;

    test := procedure(m, am) {
        return 1 - m(0) == am(0);
    };

    boxOfMystery := {cos, sin};
    mystery := arb(boxOfMystery);
    anotherMystery := +/ (boxOfMystery - {mystery});
    if (test(mystery, anotherMystery)) {
        printErr("test $testNumber$ successful (first class functions)");
    } else {
        printErr("test $testNumber$ failed (first class functions)");
    }
};
firstClassFunctions();

nestedFunctions := procedure() {
    testNumber += 1;

    callCopysOnlyFunctions := procedure() {
        return omTo42(y);
    };

    screwedSin := procedure(x) {
        return sin(x) + x;
    };

    omTo42 := procedure(x) {
        if (x == om) {
            return 42;
        } else {
            return false;
        }
    };

    y := screwedSin(1);
    z := callCopysOnlyFunctions();
    if (y > 0.8414 + 1 && y < 0.8415 + 1 && z == 42) {
        printErr("test $testNumber$ successful (nested functions)");
    } else {
        printErr("test $testNumber$ failed (nested functions)");
    }
};
nestedFunctions();

iterator := procedure() {
    testNumber += 1;

    u := [[x, y, z, w]: x in {1, 2}, y in {1, 2}, [z, w] in [[x, y]]];
    if (u == [[1, 1, 1, 1], [1, 2, 1, 2], [2, 1, 2, 1], [2, 2, 2, 2]]) {
        printErr("test $testNumber$ successful (iterators)");
    } else {
        printErr("test $testNumber$ failed (iterators)");
    }
};
iterator();

scopeTests := procedure() {
    testNumber += 1;

    result := "";
    q := [[[1, 2, 3], [4, 5, 6]]];
    for (q in q, q in q, q in q) {
        result := result + " " + q;
        q := "foo";
        p := "test";
    }
    while (p == "test") {
        p := p[2..];
    }
    v := "test";
    w := {v: w in q, v in w};
    if (result == " 1 2 3 4 5 6" && q == [[[1, 2, 3], [4, 5, 6]]] && p == "est" && v == "test") {
        printErr("test $testNumber$ successful (scope)");
    } else {
        printErr("test $testNumber$ failed (scope)");
    }
};
scopeTests();

forallTests := procedure() {
    testNumber += 1;

    a := b := c := d := "test";
    // none fails
    e := forall(a in [1 .. 5], b in [1 .. 5] | a * b <= 25);
    // first fail: c == 4, d == 4
    f := forall(c in [1 .. 5], d in [1 .. 5] | (c * d) < 16);
    if (a == "test" && b == "test" && e && c == 4 && d == 4 && !f) {
        printErr("test $testNumber$ successful (forall)");
    } else {
        printErr("test $testNumber$ failed (forall)");
    }
};
forallTests();

existsTests := procedure() {
    testNumber += 1;

    a := b := c := d := "test";
    // first exists: a == 4, b == 4
    e := exists(a in [1 .. 5], b in [1 .. 5] | a * b >= 16);
    // nothing exists
    f := exists(c in [1 .. 5], d in [1 .. 5] | c * d > 25);
    if (a == 4 && b == 4 && e && c == "test" && d == "test" && !f) {
        printErr("test $testNumber$ successful (exists)");
    } else {
        printErr("test $testNumber$ failed (exists)");
    }
};
existsTests();

lazyChecking := procedure() {
    testNumber += 1;

    correct := false;
    a := b := 1;
    increaseTrue := procedure (rw x) {
        x += 1;
        return true;
    };
    increaseFalse := procedure (rw x) {
        x += 1;
        return false;
    };

    // true and true (not lazy-checkable)
    c := increaseTrue(a) && increaseTrue(b);
    // now a and b should be 2, c should be true
    correct := a == 2 && b == 2 && c;

    // false and true (lazy-checkable)
    c := increaseFalse(a) && increaseTrue(b);
    // now a should be 3, but b still 2, c should be false
    correct := correct && a == 3 && b == 2 && !c;

    if (correct) {
        printErr("test $testNumber$ successful (lazyChecking)");
    } else {
        printErr("test $testNumber$ failed (lazyChecking)");
    }
};
lazyChecking();

relationExtension := procedure() {
    testNumber += 1;

    correct := false;

    r := { [n, n*n] : n in {1..3} };

    correct := r == {[1, 1], [2, 4], [3, 9]};

    /* change value of pair [2, 4] to [2, 3] */
    r[2] := 3;

    correct := correct && r == {[1, 1], [2, 3], [3, 9]};

    /* add pair [4, 5] */
    r[4] := 5;

    correct := correct && r == {[1, 1], [2, 3], [3, 9], [4, 5]};

    if (correct) {
        printErr("test $testNumber$ successful (relationExtension)");
    } else {
        printErr("test $testNumber$ failed (relationExtension)");
    }
};
relationExtension();

formatedString := procedure() {
    testNumber += 1;

    correct := false;

    s := "";
    for (i in [1 .. 9]) {
          s += "p$i$ || ";
    }
    s := s + "false";

    correct := s == "p1 || p2 || p3 || p4 || p5 || p6 || p7 || p8 || p9 || false";

    if (correct) {
        printErr("test $testNumber$ successful (formatedString)");
    } else {
        printErr("test $testNumber$ failed (formatedString)");
    }
};
formatedString();

precedences := procedure() {
    testNumber += 1;

    a := str(   ^conjunction(^disjunction(^disjunction(^variable("a"), ^variable("b")),
                                          ^conjunction(^negation(^variable("a")), ^negation(^variable("b")))),
                             ^disjunction(^disjunction(^variable("a"), ^variable("b")),
                                          ^conjunction(^negation(^variable("a")), ^negation(^variable("b")))))
            );
    if (a == "(a || b || !a && !b) && (a || b || !a && !b)") {
        printErr("test $testNumber$ successful (precedences)");
    } else {
        printErr("test $testNumber$ failed (precedences)");
    }
};
precedences();

complexLhsAssignment := procedure() {
    testNumber += 1;

    a := [ [11, 12, 13], [21, 22, 23], [31, 32, 33] ];
    a[2][4] := 24;
    a[3][2] *= 10;
    [a[1], a[2]] := [a[2], a[1]];
    [a[1][1], a[2][2]] := [a[2][2], a[1][1]];
    if (a == [[12, 22, 23, 24], [11, 21, 13], [31, 320, 33]]) {
        printErr("test $testNumber$ successful (complexLhsAssignment)");
    } else {
        printErr("test $testNumber$ failed (complexLhsAssignment)");
    }
};
complexLhsAssignment();

valueVsReference := procedure() {
    testNumber += 1;

    l1 := [ 1, 2, 3 ];
    l2 := l1;
    l2[2] := 5;

    correct := l1 == [1, 2, 3] && l2 == [1, 5, 3];

    s := { l1, l2 };

    correct := correct && s == {[1, 2, 3], [1, 5, 3]};

    l1[1] := 17;

    correct := correct && l1 == [17, 2, 3] && s == {[1, 2, 3], [1, 5, 3]};

    // another sanity check

    correct := correct && l2 in s;

    if (correct) {
        printErr("test $testNumber$ successful (valueVsReference)");
    } else {
        printErr("test $testNumber$ failed (valueVsReference)");
    }
};
valueVsReference();

matchSets := procedure() {
    testNumber += 1;

    s := { "a", 1 };

    match(s) {
        case { "a", x }:
            correct := x == 1;
        case { 1, x }:
            correct := false;
    }

    if (correct) {
        printErr("test $testNumber$ successful (matchSets)");
    } else {
        printErr("test $testNumber$ failed (matchSets)");
    }
};
matchSets();

