<project name="setlX" basedir="." default="jar">
    <!-- variables which determine paths and other information used later -->
    <property name="interpreter.dir" value="${basedir}/.."/>
    <property name="libs.dir"        value="${interpreter.dir}/libs"/>
    <property name="main-class"      value="org.randoom.setlxUI.pc.SetlX"/>
    <property name="j16rt.dir"       value="${interpreter.dir}/buildTools/java_1_6"/>
    <property name="src.dir"         value="${basedir}/src/main/java"/>
    <property name="grammar.dir"     value="${basedir}/src/main/antlr"/>
    <property name="test.dir"        value="${basedir}/src/test/java"/>
    <property name="build.dir"       value="${basedir}/target"/>
    <property name="classes.dir"     value="${build.dir}/classes"/>
    <property name="testclasses.dir" value="${build.dir}/testclasses"/>
    <property name="doc.dir"         value="${build.dir}/javadoc"/>

    <condition property="setlX.executable" value="${interpreter.dir}/setlX" else="${interpreter.dir}/setlX.cmd">
        <os family="unix" />
    </condition>
    <condition property="isJava6">
        <contains string="${java.version}" substring="1.6" casesensitive="false"/>
    </condition>

    <!-- discover library jars and add them to the class-path -->
    <path id="antlr-jar">
        <fileset dir="${libs.dir}" includes="antlr-*.jar"/>
    </path>
    <path id="classpath">
        <path refid="antlr-jar"/>
        <pathelement path="${classes.dir}"/>
    </path>
    <path id="junit-jar">
        <fileset dir="${libs.dir}" includes="junit-*.jar"/>
    </path>
    <path id="hamcrest-jar">
        <fileset dir="${libs.dir}" includes="hamcrest-core-*.jar"/>
    </path>
    <path id="test-classpath">
        <path refid="junit-jar"/>
        <path refid="hamcrest-jar"/>
        <pathelement path="${testclasses.dir}"/>
        <path refid="antlr-jar"/>
        <pathelement path="${classes.dir}"/>
    </path>

    <!-- discover rt.jar from java-1.6 for building 1.6 compatible with newer javac -->
    <path id="rt.jar-j1.6">
        <fileset dir="${j16rt.dir}/" includes="rt.jar"/>
    </path>

    <target name="test" depends="jar">
        <mkdir dir="${testclasses.dir}"/>
        <javac srcdir="${test.dir}" destdir="${testclasses.dir}"
               debug="true" debuglevel="lines,source"
               classpathref="test-classpath" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
        </javac>
        <java classname="org.randoom.setlx.TestRunner" classpathref="test-classpath" failonerror="true" />
        <exec executable="${setlX.executable}" dir="${interpreter.dir}" resolveexecutable="true">
            <arg value="--runtimeDebugging"/>
            <arg file="${interpreter.dir}/simpleTests/core/test.stlx"/>
        </exec>
    </target>

    <!-- create the standard jar after compiling -->
    <target name="jar" depends="compile">
        <exec executable="git" failifexecutionfails="yes" outputproperty="git.version">
            <arg value="describe"/>
            <arg value="--abbrev=40"/>
            <arg value="--always"/>
            <arg value="--long"/>
            <arg value="--dirty"/>
        </exec>
        <tstamp>
            <format property="timeAndDate.str" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <jar destfile="${interpreter.dir}/${ant.project.name}.jar" basedir="${classes.dir}" index="true">
            <manifest>
                <attribute name="Main-Class"              value="${main-class}"/>
                <attribute name="Built-By"                value="${user.name} on ${timeAndDate.str}" />
                <attribute name="Implementation-Version"  value="${git.version}" />
                <attribute name="Implementation-Java"     value="${java.vendor} ${java.version}" />
                <attribute name="Implementation-Build-OS" value="${os.name} ${os.arch} ${os.version}" />
            </manifest>
        </jar>
    </target>

    <target name="compile" depends="grammar">
        <javac srcdir="${src.dir}" destdir="${classes.dir}"
               debug="true" debuglevel="lines,source"
               classpathref="classpath" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
        </javac>
    </target>

    <target name="compile-j1.6-compatible" depends="grammar,download-j1.6-rt.jar">
        <javac srcdir="${src.dir}" destdir="${classes.dir}"
               debug="true" debuglevel="lines,source"
               classpathref="classpath" includeantruntime="false"
               fork="true" source="1.6" target="1.6" bootclasspathref="rt.jar-j1.6">
            <compilerarg value="-Xlint:all"/>
        </javac>
    </target>

    <!-- compile either with native Java 1.6, or in compatibility mode -->
    <target name="compile-j1.6" depends="compile-is-j1.6,compile-is-not-j1.6"/>
    <target name="compile-is-j1.6" if="isJava6">
        <antcall target="compile"/>
    </target>
    <target name="compile-is-not-j1.6" unless="isJava6">
        <antcall target="compile-j1.6-compatible"/>
    </target>

    <!-- create the jar after compiling with Java 1.6 -->
    <target name="jar-j1.6">
        <antcall target="clean"/>
        <antcall target="compile-j1.6"/>
        <exec executable="git" failifexecutionfails="yes" outputproperty="git.version">
            <arg value="describe"/>
            <arg value="--abbrev=40"/>
            <arg value="--always"/>
            <arg value="--long"/>
            <arg value="--dirty"/>
        </exec>
        <tstamp>
            <format property="timeAndDate.str" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <jar destfile="${interpreter.dir}/${ant.project.name}-j1.6.jar" basedir="${classes.dir}"
             index="true">
            <manifest>
                <attribute name="Main-Class"              value="${main-class}"/>
                <attribute name="Built-By"                value="${user.name} on ${timeAndDate.str}" />
                <attribute name="Implementation-Version"  value="${git.version}" />
                <attribute name="Implementation-Java"     value="${java.vendor} ${java.version}" />
                <attribute name="Implementation-Build-OS" value="${os.name} ${os.arch} ${os.version}" />
            </manifest>
        </jar>
        <antcall target="clean"/>
    </target>

    <target name="android-jars" depends="clean,doc-jar,src-jar,jar-j1.6"/>

    <!-- jars including documentation and source -->
    <target name="doc-jar" depends="grammar">
        <mkdir dir="${doc.dir}"/>
        <javadoc sourcepath="${src.dir}" destdir="${doc.dir}" classpathref="classpath"
                 author="false" version="false" use="true"
                 windowtitle="${ant.project.name} API"
                 doctitle="&lt;h1&gt;${ant.project.name}&lt;/h1&gt;"/>
        <jar destfile="${interpreter.dir}/${ant.project.name}-doc.jar" basedir="${doc.dir}"/>
    </target>

    <target name="src-jar" depends="grammar">
        <jar destfile="${interpreter.dir}/${ant.project.name}-src.jar" basedir="${src.dir}"/>
    </target>

    <!-- checks if the grammar needs to be updated or not -->
    <target name="checkForGrammarChanges">
        <!-- set "isUpToDate" to "true", if targetfile is newer as srcfile -->
        <uptodate property="isUpToDate"
                  srcfile="${grammar.dir}/SetlXgrammar.g"
                  targetfile="${src.dir}/org/randoom/setlx/grammar/SetlXgrammarParser.java"/>
    </target>

    <!-- update the grammar, but only when necessary;
         manual check is necessary, because ant cannot handle antlr v4 properly -->
    <target name="grammar" depends="checkForGrammarChanges" unless="isUpToDate">
        <java classname="org.antlr.v4.Tool" classpathref="classpath">
            <arg value="-no-listener"/>
            <arg value="-Werror"/>
            <arg line="-o ${src.dir}/org/randoom/setlx/grammar/"/>
            <arg line="-package org.randoom.setlx.grammar"/>
            <arg file="${grammar.dir}/SetlXgrammar.g"/>
        </java>
        <!-- extract antlr runtime classes and add them to the build tree -->
        <mkdir dir="${classes.dir}"/>
        <unjar src="${toString:antlr-jar}" dest="${classes.dir}">
            <patternset>
                <include name="org/antlr/v4/runtime/**/*"/>
                <exclude name="org/antlr/v4/runtime/tree/gui/**/*"/>
            </patternset>
        </unjar>
    </target>

    <target name="download-j1.6-rt.jar" unless="isJava6">
        <ant inheritAll="false" inheritRefs="false" antfile="build.xml" dir="${interpreter.dir}" target="download-j1.6-rt.jar"/>
    </target>

    <!-- clean up the mess we made by building -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${src.dir}/org/randoom/setlx/grammar"/>
    </target>

    <target name="dist-clean" depends="clean">
        <delete>
            <fileset dir="${interpreter.dir}" includes="*.jar"/>
        </delete>
    </target>
</project>

