// this program demonstrates some object orientation features of setlX

// create a constructor
c := constructor(n) {
    number := n;

    static {
        // overload '+' operator
        sum := [this, other]|-> number + other.number;
    }
};

// create two objects
a := c(5);
b := c(15);

// do some work with objects
print("a == $a$");
print("b == $b$");
print("a + b == $a + b$");

print();
// also overload '!' operator in object `a'; note 'rw' and prefix of `this.' is required for write access
a.factorial := procedure(rw this) { if (cache == om) { print("uncached factorial"); this.cache := (number ** 2)!; } return cache;};

print();
print("a == $a$");
print("a! == $a!$");
print("a == $a$");
print("a! == $a!$");

print();
// finally overload the power operator (**) with something unusual for all objects of c; note `rw' again
c.power := procedure(rw this, rw other) { [other.number, this.number] := [this.number, other.number]; return "swapped";};

print("a.number == $a.number$");
print("b.number == $b.number$");
print("a ** b == $a ** b$");
print("a.number == $a.number$");
print("b.number == $b.number$");

